vector<int>build(vector<string>&t) {
	int len = 0;
	vector<int>f(t.size());
	for (int i = 1; i < t.size(); i++){
		while (len > 0 && t[i] != t[len])len = f[len - 1];
		if (t[i] == t[len])
			len++;
		f[i] = len;
	}
	return f;
}
int KMP(vector<string>&s, vector<string>&t) {
	if (!s.size())return 0;
	int len = 0;
	vector<int>f = build(t);
	int ans = 0;
	for (int i = 0; i < s.size(); i++)
	{
		while (len > 0 && s[i] != t[len])len = f[len - 1];
		if (s[i] == t[len])
			len++;
		if (len == t.size())
		{
			ans++;
			//ans.push_back(i - len + 1);
			//len = f[len - 1];  this if ocarance cane intersect
			len = 0;
		}
	}
	return ans;
}
 