#define _CRT_SECURE_NO_WARNINGS
#include<bits/stdc++.h>
#include<unordered_map>
using namespace std;
using ll = long long;
#define all(v) ((v).begin()),((v).end())
#define allr(v)	     ((v).rbegin()), ((v).rend())
#define sz(v) ((int)(v).size())
#define clr(v, d)        memset(v, d, sizeof(v))
const double PI = acos(-1.0);
template<class Int> Int __gcd(Int a, Int b) { return (b == 0 ? abs(a) : __gcd(b, a%b)); }
void file() {
#ifndef ONLINE_JUDGE
	freopen("input.txt", "r", stdin);// freopen("out.txt", "w", stdout);
#endif
}
const int N = 2e5;
/// 
// 1-indexed lca
vector<int>g[N];
vector<int>dp[N], dep;
int len;
void dfs(int u, int p) {
	dp[u][0] = p;
	for (int i = 1; i < len; i++)
		dp[u][i] = dp[dp[u][i - 1]][i - 1];
	for (auto v : g[u])
		if (v != p)
			dep[v] = dep[u] + 1, dfs(v, u);
}
void build(int nodes, int root) {
	len = 1;
	while ((1 << len) <= nodes)len++;
	for (int i = 1; i <= nodes; i++)
		dp[i].resize(len + 1);
	dep = vector<int>(nodes + 1);
	dfs(root, root);
}
int lca(int u, int v) {
	if (u < v)swap(u, v);
	for (int k = len; k >= 0; k--)
		if (dep[u] - (1 << k) >= dep[v])u = dp[u][k];
	if (u == v)return u;
	for (int k = len; k >= 0; k--)
		if (dp[u][k] != dp[v][k])
			u = dp[u][k], v = dp[v][k];
	return dp[u][0];
}
int main() {
	cout << setprecision(4) << fixed;
	ios::sync_with_stdio(0); cin.tie(0); cout.tie(0);
	file();
	//	freopen("friday.in", "r", stdin);
	///////////
	int n;
	cin >> n;
	for (int i = 0; i <= n; i++)
		g[i].clear(), dp[i].clear();
	for (int i = 1; i <= n; i++) {
		int u, v;
		cin >> u >> v;
		g[u].push_back(v);
		g[v].push_back(u);
	}
	build(n, 1);
	int q;
	cin >> q;
	while (q--) {
		int u, v;
		cin >> u >> v;
		cout << lca(u, v) << endl;
	}

}